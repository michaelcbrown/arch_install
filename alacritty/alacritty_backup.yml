# Configuration for Alacritty, the GPU enhanced terminal emulator

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: "JetBrainsMono Nerd Font" # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Regular

  # The bold font face
  bold:
    family: "JetBrainsMono Nerd Font" # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: "JetBrainsMono Nerd Font" # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 18
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

window:
  padding:
    x: 10
    y: 10

# Should display the render timer
render_timer: false

# Colors (Tomorrow Night Bright)
colors:
  name: Embers (light)
  author: Chris Kempson
  primary:
    background: "#dbd6d1"
    foreground: "#433b32"
  cursor:
    text: "#dbd6d1"
    cursor: "#433b32"
  normal:
    black: "#16130f"
    red: "#826d57"
    green: "#57826d"
    yellow: "#6d8257"
    blue: "#6d5782"
    magenta: "#82576d"
    cyan: "#576d82"
    white: "#a39a90"
  bright:
    black: "#5a5047"
    red: "#826d57"
    green: "#57826d"
    yellow: "#6d8257"
    blue: "#6d5782"
    magenta: "#82576d"
    cyan: "#576d82"
    white: "#dbd6d1"

# Colors (Solarized Dark)
# colors:
#   # Default colors
#   primary:
#     background: '0x002b36'
#     foreground: '0x839496'
#
#   # Normal colors
#   normal:
#     black:   '0x073642'
#     red:     '0xdc322f'
#     green:   '0x859900'
#     yellow:  '0xb58900'
#     blue:    '0x268bd2'
#     magenta: '0xd33682'
#     cyan:    '0x2aa198'
#     white:   '0xeee8d5'
#
#   # Bright colors
#   bright:
#     black:   '0x002b36'
#     red:     '0xcb4b16'
#     green:   '0x586e75'
#     yellow:  '0x657b83'
#     blue:    '0x839496'
#     magenta: '0x6c71c4'
#     cyan:    '0x93a1a1'
#     white:   '0xfdf6e3'
# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action` or `chars` field must be present. `chars` writes the
# specified string every time that binding is activated. These should generally
# be escape sequences, but they can be configured to send arbitrary strings of
# bytes. Possible values of `action` include `Paste` and `PasteSelection`.
key_bindings:
  - { key: V, mods: Command, action: Paste }
  - { key: C, mods: Command, action: Copy }
  - { key: Home, chars: "\e[H", mode: ~AppCursor }
  - { key: Home, chars: "\e[1~", mode: AppCursor }
  - { key: End, chars: "\e[F", mode: ~AppCursor }
  - { key: End, chars: "\e[4~", mode: AppCursor }
  - { key: PageUp, chars: "\e[5~" }
  - { key: PageDown, chars: "\e[6~" }
  - { key: Left, mods: Shift, chars: "\e[1;2D" }
  - { key: Left, mods: Control, chars: "\e[1;5D" }
  - { key: Left, mods: Alt, chars: "\e[1;3D" }
  - { key: Left, chars: "\e[D", mode: ~AppCursor }
  - { key: Left, chars: "\eOD", mode: AppCursor }
  - { key: Right, mods: Shift, chars: "\e[1;2C" }
  - { key: Right, mods: Control, chars: "\e[1;5C" }
  - { key: Right, mods: Alt, chars: "\e[1;3C" }
  - { key: Right, chars: "\e[C", mode: ~AppCursor }
  - { key: Right, chars: "\eOC", mode: AppCursor }
  - { key: Up, mods: Shift, chars: "\e[1;2A" }
  - { key: Up, mods: Control, chars: "\e[1;5A" }
  - { key: Up, mods: Alt, chars: "\e[1;3A" }
  - { key: Up, chars: "\e[A", mode: ~AppCursor }
  - { key: Up, chars: "\eOA", mode: AppCursor }
  - { key: Down, mods: Shift, chars: "\e[1;2B" }
  - { key: Down, mods: Control, chars: "\e[1;5B" }
  - { key: Down, mods: Alt, chars: "\e[1;3B" }
  - { key: Down, chars: "\e[B", mode: ~AppCursor }
  - { key: Down, chars: "\eOB", mode: AppCursor }
  - { key: Tab, mods: Shift, chars: "\e[Z" }
  - { key: F1, chars: "\eOP" }
  - { key: F2, chars: "\eOQ" }
  - { key: F3, chars: "\eOR" }
  - { key: F4, chars: "\eOS" }
  - { key: F5, chars: "\e[15~" }
  - { key: F6, chars: "\e[17~" }
  - { key: F7, chars: "\e[18~" }
  - { key: F8, chars: "\e[19~" }
  - { key: F9, chars: "\e[20~" }
  - { key: F10, chars: "\e[21~" }
  - { key: F11, chars: "\e[23~" }
  - { key: F12, chars: "\e[24~" }
  - { key: Back, chars: "" }
  - { key: Delete, chars: "\e[3~", mode: AppKeypad }
  - { key: Delete, chars: "\e[3~", mode: ~AppKeypad }
#  - { key: Delete,                  chars: "\x1b[P",   mode: ~AppKeypad  }
# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
theme: Embers.light

# Shell
#
# You can set this to a path to your favorite shell, e.g. /bin/fish
#shell:
